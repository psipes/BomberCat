
#pragma once

#include "stdafx.h"

#include "NVCUtils/NVCUtils.h"


/*
   WinApplFramework.h -- Beginning of naive class for simple windows application
*/



class WinApplFramework
{
public:
   WinApplFramework ( void );

   virtual ~WinApplFramework ( void ) { }    // dtor

   // The main entry point to the Application Framework
   // The application must provide an actual file-scope ::WinMain with the standard
   // windows entrypoint prototype:
   //    int WINAPI WinMain (....) 
   // The paramters are exactly as shown below.
   // The ONLY thing this function is responsible for is created a WinApplFramework derived 
   // object instance, and calling the winMain() method via that object.
   // A MINIMAL, but working, function is shown below:
   //   int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
   //   {
   //      FroggerAppl  app;  // use appropriate constructor
   //      return app.WinMain( "Frogger", hInstance, hPrevInstance, lpCmdLine, nCmdShow );
   //   }

   // Original: appTitle and className must be provided by overridden virtual winResrcXxxx functions
   int winMain( HINSTANCE hInstance,
                HINSTANCE hPrevInstance,
                LPTSTR    lpCmdLine,
                int       nCmdShow );
   
   // Newer: appTitle and className taken from parameter, 
   // no virtual functions are needed - simplifies apps without resource.h
   int winMain( TCHAR*    appTitleStr,
                HINSTANCE hInstance,
                HINSTANCE hPrevInstance,
                LPTSTR    lpCmdLine,
                int       nCmdShow );


   
   ///////////////////////////////////////////////////////////////////////////
   // DEBUG ASSISTANCE: These static methods are active only in DEBUG builds
   ///////////////////////////////////////////////////////////////////////////
   // Enable compiler specific CRT Heap (dynamic memory) debugging
   static void enableCRTHeapDebugging ( bool maxImpact = false );
      // If CRT debugging enabled, breakpoint on the specified allocation #   
      static void breakOnCRTAlloc ( int n );     

private:
   void loadResourceStrings ( void );

protected:
   
   // Accessor methods to retrieve Window HINSTANCE and Main Window handle
   inline HINSTANCE   hInst ( void ) const { return hInstance; }
   inline HWND        hWnd ( void )  const { return hMainWnd; }

   //-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0
   // VIRTUAL INBOUND INTERFACE:  
   //    All WinApplFramework applications MUST have a Window - thus, the standard
   //    windows class registration and window creation must occur.  This involves
   //    (usually) interaction with the application resources - specified by Resource.h
   //    The winResrcIdXxxxXxxx() virtual functions are used if these resources exist.
   //    However, some applications may have no resources.
   //    In this case, the required information must be provided by the virtual functions 
   //    which create the class (winClassXxxxxXxxx()) and which create the window.
   //    *Defaults are used where possible*


   // pure virtual methods are overridden by Application layer to provide the resource.h 
   // identifiers generated by a standard Visual Studio boilerplate project.
   // LATEST: Removed pure virtual - now apps without resources are easier to make.
   // The WinApplFramework layer CALLS these functions to retrieve the needed data items,
   // i.e., all the application specific Resource.h resrc ID's.
   virtual UINT winResrcIdTitleStr ( void ) { return 0; }  
   virtual UINT winResrcIdClassStr ( void ) { return 0; }  
   virtual UINT winResrcIdSmallIcon ( void ) { return 0; } 
   virtual UINT winResrcIdIcon ( void ) { return 0; }      
   virtual UINT winResrcIdMenu ( void ) { return 0; }      
   



   ///<summary>
   /// Sets the main window title to the specified string
   ///</summary>
   void winSetTitle ( tstring title );
    
   /// <summary>
   /// winPreCreateWindow is called IMMEDIATELY on entry to winmain(), allowing
   /// the user to perform initialization the is necessary to create the application
   /// and/or its windows.
   /// </summary>
   /// <returns>true if successful</returns>
   virtual bool winPreCreateWindow() { return true; }

   // Main Window class registration:
   virtual bool winRegisterClass ( void );
      virtual HBRUSH    winClassBackgroundBrush ( void );   // default is Windows standard
      virtual HCURSOR   winClassCursor ( void );            // default is Windows standard (arrow)
      virtual HICON     winClassIcon ( void );              // default is NULL - none.
      virtual HICON     winClassSmallIcon ( void );         // default is NULL - none.
      virtual LPCTSTR   winClassMenu ( void );              // default is NULL - none.
      virtual LPCTSTR   winClassName ( void );              // default loads winResrcIdClassStr
                                                            //    and uses placeholder if fails.
                                                            //    *MessageBox informs*


   // Main Window Create & initialization
   virtual bool winInitInstance( int nCmdShow );
      virtual int winScreenWidth() const { return 1024; }
      virtual int winScreenHeight() const { return 768; }
      virtual LPCTSTR winAppTitleStr ( void );               // default loads winResrcIdTitleStr() resrc
                                                            // string, uses placeholder if fail & MessageBox note.
   
   // Resize client rectangle to winScreenWidth()/winScreenHeight() 
   void winResizeClient ( void );

   // Called immediately after successfull creation of the main window hWnd()
   // and before any message processiong
   virtual bool winPostCreateWindow ( void ) { return true; }
   virtual bool winAppIdle ( void ) { return true; }
   virtual bool winAppExit ( void ) { return true; }


   //--------------- Windows Message Methods -------------------------------------

   // Default behavior for each message type: Do NOTHING & return -1
   // If the message has been processed, return 0.  
   // Any NON-ZERO return from these functions passes the message to DefWindowProc 
   virtual int onCommand( HWND hwnd, WPARAM wParam, LPARAM lParam );                   //WM_COMMAND
      // If onCommand is not overridden, it decodes & calls one of these virtual functions:
      virtual int onMenuCommand( HWND hwnd, DWORD menuId, bool isAccel = false );               //WM_COMMAND menu specifc case
      virtual int onCtrlCommand( HWND hwnd, DWORD ctrlId, DWORD ctrlNotifyCode, HWND hCtrl );   //WM_COMMAND control specific case
   virtual int onUserMsg( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam );     //WM_USER to 0x7FFF
   virtual int onAppMsg ( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam );     //WM_APP to 0xBFFF
   virtual int onRegMsg ( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam );     //0xC000 to 0xFFFF, Registered messages
   virtual int onMessage( HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam );     //None of the above...
   
   // Default behavior: PostQuitMessage(0)
   virtual int onDestroy ( void ); //WM_DESTROY
   
   bool myAppIsRunning;


   //---------------------------------------------------------------------------------------- 
private:
   // Windows specifics
   friend LRESULT CALLBACK forwardingWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
   friend LRESULT CALLBACK startupWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
   LRESULT memberWndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

private:
   HINSTANCE   hInstance;
   HINSTANCE   hPrevInstance;
   LPTSTR      lpCmdLine;
   int         nCmdShow;

   HWND        hMainWnd;
               
   tstring      szAppTitle;
   tstring      szAppWndClass;

   const static UINT MAX_LOADSTRING = 100;

private:
   WinApplFramework( const WinApplFramework& other );  // disabled copy ctor
   WinApplFramework& operator= ( const WinApplFramework& rhs );  // disabled assignment op      
};
